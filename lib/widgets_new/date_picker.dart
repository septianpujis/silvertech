import 'package:flutter/material.dart';

class ModalDatePicker {
  static Future<DateTime?> showDatePicker(BuildContext context,
      DateTime initialDate, DateTime firstDate, DateTime lastDate,
      {bool barrierDismissible = true,
      Color? barrierColor,
      String? barrierLabel,
      bool useSafeArea = true,
      bool useRootNavigator = true,
      RouteSettings? routeSettings,
      Offset? anchorPoint,
      DateTime? currentDate,
      DatePickerEntryMode initialEntryMode = DatePickerEntryMode.calendar,
      bool Function(DateTime)? selectableDayPredicate,
      String? cancelText,
      String? confirmText,
      String? helpText,
      DatePickerMode initialCalendarMode = DatePickerMode.day,
      String? errorFormatText,
      String? errorInvalidText,
      String? fieldHintText,
      String? fieldLabelText,
      TextInputType? keyboardType,
      String? restorationId}) {
    return showDialog<DateTime>(
      context: context,
      barrierDismissible: barrierDismissible,
      barrierColor: barrierColor,
      barrierLabel: barrierLabel,
      useSafeArea: useSafeArea,
      useRootNavigator: useRootNavigator,
      routeSettings: routeSettings,
      anchorPoint: anchorPoint,
      builder: (BuildContext context) {
        return DatePickerDialog(
          initialDate: initialDate,
          firstDate: firstDate,
          lastDate: lastDate,
          currentDate: currentDate,
          initialEntryMode: initialEntryMode,
          selectableDayPredicate: selectableDayPredicate,
          cancelText: cancelText,
          confirmText: confirmText,
          helpText: helpText,
          initialCalendarMode: initialCalendarMode,
          errorFormatText: errorFormatText,
          errorInvalidText: errorInvalidText,
          fieldHintText: fieldHintText,
          fieldLabelText: fieldLabelText,
          keyboardType: keyboardType,
          restorationId: restorationId,
        );
      },
    );
  }
}

class ModalDateRangePicker {
  static Future<DateTime?> showDateRangePicker(BuildContext context,
      DateTimeRange initialDateRange, DateTime firstDate, DateTime lastDate,
      {bool barrierDismissible = true,
      Color? barrierColor,
      String? barrierLabel,
      bool useSafeArea = true,
      bool useRootNavigator = true,
      RouteSettings? routeSettings,
      Offset? anchorPoint,
      DateTime? currentDate,
      DatePickerEntryMode initialEntryMode = DatePickerEntryMode.calendar,
      String? helpText,
      String? cancelText,
      String? confirmText,
      String? saveText,
      String? errorInvalidRangeText,
      String? errorFormatText,
      String? errorInvalidText,
      String? fieldStartHintText,
      String? fieldEndHintText,
      String? fieldStartLabelText,
      String? fieldEndLabelText,
      // DatePickerMode initialCalendarMode = DatePickerMode.day,
      // String? fieldHintText,
      // String? fieldLabelText,
      // TextInputType? keyboardType,
      String? restorationId}) {
    return showDialog<DateTime>(
      context: context,
      barrierDismissible: barrierDismissible,
      barrierColor: barrierColor,
      barrierLabel: barrierLabel,
      useSafeArea: useSafeArea,
      useRootNavigator: useRootNavigator,
      routeSettings: routeSettings,
      anchorPoint: anchorPoint,
      builder: (BuildContext context) {
        return DateRangePickerDialog(
          initialDateRange: initialDateRange,
          firstDate: firstDate,
          lastDate: lastDate,
          currentDate: currentDate,
          initialEntryMode: initialEntryMode,
          helpText: helpText,
          cancelText: cancelText,
          confirmText: confirmText,
          saveText: saveText,
          errorInvalidRangeText: errorInvalidRangeText,
          errorFormatText: errorFormatText,
          errorInvalidText: errorInvalidText,
          fieldStartHintText: fieldStartHintText,
          fieldEndHintText: fieldEndHintText,
          fieldStartLabelText: fieldStartLabelText,
          fieldEndLabelText: fieldEndLabelText,
          restorationId: restorationId,
        );
      },
    );
  }
}
